unit Unit1;

interface

uses
  Classes, SysUtils,Math;

TYPE
       list=array[0..15]of extended;
       list2=array[0..16]of extended;
       POLINOMIO = class
           private
                 grado: integer;
                 coef: list;
           public
                 constructor Crear(g:integer;lc:list);
                 function Horner_Simple(objeto:POLINOMIO;alfa:extended):POLINOMIO;
                 function Horner_2(objeto:POLINOMIO;a,b:extended):POLINOMIO;
                 function Horner_Double(objeto:POLINOMIO;a,b:extended):POLINOMIO;
                 procedure pos_raiz_enteras(objeto:POLINOMIO);
                 procedure pos_raiz_racionales(objeto:POLINOMIO);
                 function esprimo(x:extended):byte;
                 procedure lagrague(objeto:POLINOMIO;var lamda,p1,p2,p3:extended);
                 function cotasuplagrague(objeto:POLINOMIO):extended;
                 function obt_p1(ob:POLINOMIO):POLINOMIO;
                 function obt_p2(ob:POLINOMIO):POLINOMIO;
                 function obt_p3(ob:POLINOMIO):POLINOMIO;
                 procedure laguerre(objeto:POLINOMIO;var a,b,c,d:extended);
                 function cota_sup_laguerre(ob:POLINOMIO):extended;
                 function newton_p_poli(objeto:POLINOMIO;x1,e:extended):extended;
                 procedure HornerN(objeto:POLINOMIO;x0:extended;var p,dp:extended);
                 function evaluar_fun(objeto:POLINOMIO;x:extended):extended;
                 {--------------------------------------------------}
                 procedure carga_polinomio();
                 procedure raices_cuadraticas(var r,s,r1,i1,r2,i2:extended);
                 procedure Bairstow(obj:POLINOMIO;e,r,s:extended;var re,im:list;maxiter:integer);
                 procedure mostrar(p:POLINOMIO);
                 procedure mostrar_Bairstow(re,im:list);

           end;



implementation

             constructor POLINOMIO.Crear(g:integer;lc:list);
             begin
                 grado:=g;
                 coef:=lc;
             end;

             function POLINOMIO.Horner_Simple(objeto:POLINOMIO;alfa:extended):POLINOMIO;
             var
               obj2:POLINOMIO;
               i:byte;
             begin
                 obj2:=objeto;
                 writeln('ceficiente q se matiene',obj2.coef[obj2.grado]);
                 for i:=(obj2.grado-1) downto 0 do
                    begin obj2.coef[i]:=(alfa*obj2.coef[i+1])+objeto.coef[i];
                   writeln('ceficiente ',i,' valor ',obj2.coef[i]);
                 end;
                 result:= obj2;
             end;

             function POLINOMIO.Horner_2(objeto:POLINOMIO;a,b:extended):POLINOMIO;
             var
                  obj2:POLINOMIO;
                  c:extended;
                  i:byte;
             begin
                 c:=b/a;
                 obj2:= Horner_Simple(objeto,c);
                 for i:=1 to objeto.grado do
                     obj2.coef[i]:=obj2.coef[i]/a;
                 result:= obj2
             end;

             function POLINOMIO.Horner_double(objeto:POLINOMIO;a,b:extended):POLINOMIO;
             var
                  obj2:POLINOMIO;
                  i:byte;
             begin
                 obj2:= objeto;
                 obj2.coef[objeto.grado]:=objeto.coef[objeto.grado];
                 writeln('ceficente q s montiene',obj2.coef[objeto.grado]);
                 obj2.coef[objeto.grado-1]:=(a*obj2.coef[objeto.grado])+objeto.coef[objeto.grado-1];
                 writeln('ceficente ',obj2.coef[objeto.grado-1]);
                 for i:=objeto.grado-2 downto 1 do
                     begin
                     obj2.coef[i]:= (obj2.coef[i+1]*a)+(obj2.coef[i+2]*b)+objeto.coef[i];
                     writeln('ceficente ',obj2.coef[i]);
                     end;
                     obj2.coef[0]:=(obj2.coef[2]*b)+objeto.coef[0];
                     writeln('ceficente ',obj2.coef[0]);
                 result:= obj2;
             end;

             procedure POLINOMIO.pos_raiz_enteras(objeto:POLINOMIO);
             var
                  i,n:byte;
                  c:extended;
               begin
                      c:= (abs(objeto.coef[objeto.grado])/2);
                      n:=Trunc(c);
                      for i:=1 to n do
                          if (objeto.coef[objeto.grado]/i) = 0 then
                             write(i,' , ',(-1)*i,' , ');
                 end;
             function POLINOMIO.esprimo(x:extended):byte;
             var
               n,p,i,j:byte;
             begin
                  p:=2;
                  n:= Trunc(x/2);
                 for i:=1 to n do
                   begin   if (x/i)=0 then
                                    p:=p+1;
                     end;
                 if (p<=(x/2)) and (x<>1) then
                    begin
                    result:=1;
                    end
                 else
                    begin
                     result:=0;
                    end;
             end;

             procedure POLINOMIO.pos_raiz_racionales(objeto:POLINOMIO);
             var
                  i,n,j,m,pri,pri2:byte;
                  p,q,c,b:extended;
             begin
                      c:= (abs(objeto.coef[objeto.grado])/2);
                      b:= (abs(objeto.coef[0])/2);
                      n:=Trunc(b);
                      m:=Trunc(c);
                      for i:=1 to m do
                          begin
                         if (objeto.coef[objeto.grado]/i) = 0 then
                            p:= objeto.coef[objeto.grado];
                            for j:=1 to n do
                                begin
                               if (objeto.coef[0]/i)=0 then
                                  q:= objeto.coef[objeto.grado];
                                  if (p<>0) and (q<>0) then
                                     begin
                                     pri:=objeto.esprimo(p);
                                     pri2:=objeto.esprimo(q);
                                     if (pri = 1) or (pri2 = 1) then
                                        write(p,'/',q ,' ,');
                                     end;
                                     end;
                            p:=0;q:=0;
                           end;
                 end;


         procedure POLINOMIO.lagrague(objeto:POLINOMIO;var lamda,p1,p2,p3:extended);
                var
                  p_1:POLINOMIO;
                 begin
                  lamda:=objeto.cotasuplagrague(objeto);
                  p_1:=objeto.obt_p1(objeto);
                  p1:=p_1.cotasuplagrague(p_1);
                  p_1:=objeto.obt_p2(objeto);
                  p2:=p_1.cotasuplagrague(p_1);
                  p_1:=objeto.obt_p3(objeto);
                  p3:=p_1.cotasuplagrague(p_1);
                 end;
         function POLINOMIO.cotasuplagrague(objeto:POLINOMIO):extended;
         var
           k,i:byte;
           ex,max,a,x:extended;
         begin
                 k:=0;
                 max:=0;
                for i:=objeto.grado downto 0 do
                  begin
                    if objeto.coef[i]<0 then
                       begin
                       x:=abs(objeto.coef[i]);
                       if  x>max then
                           max:=x;
                       end;
                  end;
                i:=objeto.grado;
                while (objeto.coef[i]>=0)and(i>0) do
                    begin
                        k:=k+1;
                        i:=i-1;
                      end;
             a:=1+(Exp((1/k)*Ln(max/objeto.coef[objeto.grado])));
             result:=a;
             end;
         function POLINOMIO.obt_p1(ob:POLINOMIO):POLINOMIO;
            var
               p1:POLINOMIO;
               i,j:byte;
               x:list;
            begin
                i:=0;
                     for j:=ob.grado downto 0 do
                         begin
                          x[i]:=ob.coef[j];
                          i:=i+1;
                          end;
                 if x[ob.grado]<0 then
                    for i:=0 to ob.grado do
                      x[i]:=(-1)*x[i];
                 p1:=POLINOMIO.Crear(ob.grado,x);
           result:=p1;
                end;
         function POLINOMIO.obt_p2(ob:POLINOMIO):POLINOMIO;
            var
               p2:POLINOMIO;
              i,j,y:byte;
              x:list;
            begin
                  y:=ob.grado;
                 for i:=0 to ob.grado do
                 begin
                   if y/2=0 then
                        begin
                          x[i]:=(-1)*ob.coef[i];
                          end
                    else begin
                    x[i]:=ob.coef[i];
                   end;
                    y:=y-1;
                   end;
                 if x[ob.grado]<0 then
                    for i:=0 to ob.grado do
                        x[i]:=(-1)*x[i];
                 p2:=POLINOMIO.Crear(ob.grado,x);
                 result:=p2;
            end;
         function POLINOMIO.obt_p3(ob:POLINOMIO):POLINOMIO;
         var
           p3:POLINOMIO;
           i,y,j:byte;
           x:list;
         begin
                y:=ob.grado;
                i:=0;
                 for j:=ob.grado downto 0 do
                          begin
                              if y/2=0 then
                               begin
                                x[i]:=(-1)*ob.coef[j];
                                end
                                else begin
                                x[i]:=ob.coef[j];
                                end;
                                y:=y-1;
                                i:=i+1;
                          end;
                 if x[1]<0 then
                    for i:=0 to ob.grado do
                    x[i]:=(-1)*x[i];
                 p3:=POLINOMIO.Crear(ob.grado,x);
            obt_p3:=p3;
                end;
         procedure POLINOMIO.laguerre(objeto:POLINOMIO;var a,b,c,d:extended);
         var
           p_1:POLINOMIO;
         begin
              a:=objeto.cota_sup_laguerre(objeto);
              p_1:=objeto.obt_p1(objeto);
              b:=p_1.cota_sup_laguerre(p_1);
              p_1:=objeto.obt_p2(p_1);
              c:=p_1.cota_sup_laguerre(p_1);
              p_1:=objeto.obt_p3(p_1);
              d:=p_1.cota_sup_laguerre(p_1);
             end;
         function  POLINOMIO.cota_sup_laguerre(ob:POLINOMIO):extended;
         var
           i,j,b:byte;
           p:POLINOMIO;
         begin
             i:=0;
             b:=1;
             writeln('cominezo de while cota sup laguerre');
             while b<>0 do
               begin
               i:=i+1;
               p:=ob.Horner_Simple(ob,i);
               b:=0;
               writeln('b',b);
               for j:=0 to p.grado do
                 begin
                    writeln(p.coef[j]);
                    if ((p.coef[j])<0) then
                     b:=1;
                 end;
               writeln('fin de while');
               end;
             cota_sup_laguerre:=i;
             end;
        {-------------------------------------------------------------------}
        procedure POLINOMIO.carga_polinomio();
             var
                  i,gr:integer;
                  c:extended;
             begin
                  writeln('ingrese el grado del Polinomio: ');
                  read(gr);
                  grado:= gr;
                  writeln('ingrese los coeficientes del Polinomio: ');
                  for i:=gr downto 0 do
                    begin
                         write('a[',i,']:= ');
                         readln(c);
                         coef[i]:=c;
                    end;
             end;
           procedure POLINOMIO.raices_cuadraticas(var r,s,r1,i1,r2,i2:extended);
           var
               disc:real;
           begin
                disc:= r2+4*s;
                if disc>=0 then
                  begin
                   r1:= (r+power(disc,0.5))/2;
                   i1:=0;
                   r2:= (r-power(disc,0.5))/2;
                   I2:=0
                  end
                else
                  begin
                    r1:=r2;
                    r2:=r/2;
                    i1:= power(ABS(disc),0.5)/2;
                    i2:= -i1;
                  end;
           end;

           procedure POLINOMIO.Bairstow(obj:POLINOMIO; e,r,s:extended;var re,im:list;maxiter:integer);
             var
                b,c,a:list2;
                i,iter:integer;
                r1,i1,r2,i2,ea1,ea2,det,dr,ds:extended;
             begin
                iter:=0;
                ea1:=1;
                ea2:=1;
                while (obj.grado>2) and (iter<=maxiter) do
                  begin
                     iter:=0;
                     repeat
                           inc(iter);
                           b[obj.grado]:=a[obj.grado];
                           b[obj.grado-1]:=a[obj.grado-1]+r*b[obj.grado];
                           c[obj.grado]:=b[obj.grado];
                           c[obj.grado-1]:=b[obj.grado-1]+r*c[obj.grado];
                           for i:=(obj.grado-2) downto 0 do
                             begin
                                   b[i]:= a[i]+r*b[i+1]+s*b[i+2];
                                   c[i]:= b[i]+r*c[i+1]+s*c[i+2];
                             end;
                           det:= c[2]*c[2]-c[3]*c[1];
                           if det<>0 then
                              begin
                              dr:= (-b[1]*c[2]+b[0]*c[3])/det;
                              ds:= (-b[0]*c[2]+b[1]*c[1])/det;
                              r:=r+dr;
                              s:=s+ds;
                              if r<>0 then
                                  ea1:= abs(dr/r)*100;
                              if s<>0 then
                                  ea2:= abs(ds/s)*100;
                              end
                           else
                              begin
                                  r:=r+1;
                                  s:=s+1;
                                  iter:=0;
                              end;
                     until ((ea1<=e) and (ea2<=e)) or (iter>maxiter);
                     obj.raices_cuadraticas(r,s,r1,i1,r2,i2);
                     re[obj.grado]:= r1;
                     re[obj.grado-1]:=r2;
                     im[obj.grado]:= i1;
                     im[obj.grado-1]:= i2;
                     obj.grado:= obj.grado-2;
                     for i:=0 to obj.grado do
                         a[i]:=b[i+2]
                  end;
                if (iter<maxiter) then
                   if (obj.grado=2) then
                     begin
                       r:= -a[1]/a[2];
                       s:= -a[0]/a[2];
                       obj.raices_cuadraticas(r,s,r1,i1,r2,i2);
                       re[obj.grado]:= r1;
                       re[obj.grado-1]:= r2;
                       im[obj.grado]:= i1;
                       im[obj.grado-1]:= i2;
                     end
                   else
                     begin
                         re[obj.grado]:= -a[0]*a[1];
                         im[obj.grado]:= 0;
                     end;
             end;

            procedure POLINOMIO.mostrar_Bairstow(re,im:list);
              VAR
                   i:integer;
              begin
                   for i:=0 to POLINOMIO.grado do
                     writeln('parte real: ',re[i],' ,imaginaria: ',im[i]);
              end;

           procedure POLINOMIO.mostrar(p:POLINOMIO);
             var
               i:integer;
             begin
               for i:=p.grado downto 2 do
                      writeln(p.coef[i],' x^ ',i-1,'+');
               writeln(p.coef[1],' x');
             end;
         {-------------------------------------------------------------------}
           function POLINOMIO.newton_p_poli(objeto:POLINOMIO;x1,e:extended):extended;
           var
             x0,p,dp:extended;
             poli:POLINOMIO;
             begin
                  x0:=0;
                  while abs(x1-x0)<e do
                    begin
                       x0:=x1;
                       objeto.HornerN(objeto,x0,p,dp);
                       x1:=x0-(p/dp)
                       end;
            result:=x1;
            end;
           procedure POLINOMIO.HornerN(objeto:POLINOMIO;x0:extended;var p,dp:extended);
           var
             i:byte;
             begin
                p:=objeto.coef[objeto.grado];
                dp:=0;
                for i:=objeto.grado downto 0 do
                   begin
                  dp:=p+x0+dp;
                  p:=objeto.coef[i]+x0*p;
                   end;
             end;
          function POLINOMIO.evaluar_fun(objeto:POLINOMIO;x:extended):extended;
          var
            res:extended;
            j,i:byte;
            begin
               res:=0;
               j:=objeto.grado;
               for i:=0 to objeto.grado do
                  begin
                  res:=res+objeto.coef[i]*power(x,j);
                  j:=j-1;
                  end;
               result:=res;
            end;

end.



